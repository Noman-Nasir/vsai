{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "next/core-web-vitals",
    "prettier"
  ],
  "plugins": ["@typescript-eslint", "prettier", "testing-library", "simple-import-sort"],
  "rules": {
    "react-hooks/exhaustive-deps": "off",
    "react/react-in-jsx-scope": "off",
    "require-jsdoc": [
      "error",
      {
        "require": {
          "FunctionDeclaration": true,
          "MethodDefinition": true,
          "ClassDeclaration": true,
          "ArrowFunctionExpression": true,
          "FunctionExpression": true
        }
      }
    ],
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-use-before-define": ["error"],
    "@typescript-eslint/no-unused-vars": ["error"],
    "react/prop-types": "off",
    "no-multiple-empty-lines": [
      "error",
      {
        "max": 2,
        "maxEOF": 1
      }
    ],
    "indent": "off",
    "@typescript-eslint/no-shadow": ["error"],
    "@typescript-eslint/member-delimiter-style": ["error"],
    "simple-import-sort/imports": "error",
    "simple-import-sort/exports": "error",
    "prettier/prettier": "error"
  },
  "overrides": [
    // Only uses Testing Library lint rules in test files
    {
      "files": ["**/__tests__/**/*.[jt]s?(x)", "**/?(*.)+(spec|test).[jt]s?(x)"],
      "extends": ["plugin:testing-library/react"],
      "rules": {
        "testing-library/no-node-access": ["off"]
      }
    },
    {
      "files": ["./**/*.+(jsx|tsx)"],
      "rules": {
        "require-jsdoc": ["off"]
      }
    },
    {
      "files": ["*.+(js|tsx|js|ts)"],
      "rules": {
        "simple-import-sort/imports": [
          "error",
          {
            "groups": [
              // `next/react` related packages come first
              ["^(next|react)", "^@?\\w"],
              // Internal packages
              ["^(@|__tests__|components|hooks|library|models|pages|public|styles|utils)(/.*|$)"],
              // Side effect imports
              ["^\\u0000"],
              // Parent imports. Put `..` last
              ["^\\.\\.(?!/?$)", "^\\.\\./?$"],
              // Other relative imports. Put same-folder imports and `.` last
              ["^\\./(?=.*/)(?!/?$)", "^\\.(?!/?$)", "^\\./?$"],
              // Style imports
              ["^.+\\.?(css)$"]
            ]
          }
        ]
      }
    }
  ],
  "settings": {
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true
      }
    }
  }
}
